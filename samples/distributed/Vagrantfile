# -*- mode: ruby -*-
# vi: set ft=ruby :
# SPDX-license-identifier: Apache-2.0
##############################################################################
# Copyright (c) 2020
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Apache License, Version 2.0
# which accompanies this distribution, and is available at
# http://www.apache.org/licenses/LICENSE-2.0
##############################################################################

require 'yaml'

nodes = YAML.load_file(File.dirname(__FILE__) + '/pdf.yml')
vagrant_boxes = YAML.load_file(File.dirname(__FILE__) + '/../../distros_supported.yml')

$no_proxy = ENV['NO_PROXY'] || ENV['no_proxy'] || "127.0.0.1,localhost"
nodes.each do |node|
  if node.has_key? "networks"
    node['networks'].each do |network|
      $no_proxy += "," + network['ip']
    end
  end
end
# NOTE: This range is based on mgmt-net network definition CIDR 192.168.122.0/27
(1..31).each do |i|
  $no_proxy += ",192.168.122.#{i},10.0.2.#{i}"
end
# NOTE: This is the kolla_internal_vip_address value
$no_proxy += ",10.10.13.3"
$socks_proxy = ENV['socks_proxy'] || ENV['SOCKS_PROXY'] || ""

$distro = ENV['OS_DISTRO'] || "centos"
$distro_release = ENV['OS_DISTRO_RELEASE'] || 7
puts "[INFO] Linux Distro: #{$distro} - #{$distro_release}"

Vagrant.configure("2") do |config|
  config.vm.provider :libvirt
  config.vm.provider :virtualbox

  config.vm.synced_folder '../../', '/vagrant'
  config.vm.box =  vagrant_boxes[$distro][$distro_release]["name"]
  config.vm.box_version = vagrant_boxes[$distro][$distro_release]["version"]
  config.ssh.insert_key = false
  config.vm.provider :libvirt do |v|
    v.management_network_address = "192.168.122.0/27"
    v.management_network_name = "mgmt-net"
    v.random_hostname = true
    v.cpu_mode = 'host-passthrough'
  end

  if Vagrant.has_plugin?('vagrant-proxyconf')
    if ENV['http_proxy'] != nil or ENV['HTTP_PROXY'] != nil or ENV['https_proxy'] != nil or ENV['HTTPS_PROXY'] != nil
      config.proxy.http     = ENV['http_proxy'] || ENV['HTTP_PROXY'] || ""
      config.proxy.https    = ENV['https_proxy'] || ENV['HTTPS_PROXY'] || ""
      config.proxy.no_proxy = $no_proxy
      config.proxy.enabled = { docker: false }
    end
  end

  config.vm.provision 'shell', inline: <<-SHELL
    mkdir -p /root/.ssh
    cat /vagrant/insecure_keys/key.pub | tee /root/.ssh/authorized_keys
    chmod 700 ~/.ssh
    chmod 600 ~/.ssh/authorized_keys
    sed -i '/^PermitRootLogin no/d' /etc/ssh/sshd_config
    if command -v sestatus; then
        sudo setenforce Permissive
        sudo sed -i "s/^SELINUX=.*/SELINUX=permissive/g" /etc/selinux/config
    fi
  SHELL

  nodes.each do |node|
    config.vm.define node['name'] do |nodeconfig|
      nodeconfig.vm.hostname = node['name']

      [:virtualbox, :libvirt].each do |provider|
        nodeconfig.vm.provider provider do |p, override|
          p.cpus = node['cpus']
          p.memory = node['memory']
        end
      end

      # Networks
      if node.has_key? "networks"
        node['networks'].each do |network|
          nodeconfig.vm.network :private_network, :ip => network['ip'], :type => :static,
          libvirt__network_name: network['name']
        end
      end
      if node['roles'].include?('network')
        nodeconfig.vm.network :private_network, ip: '0.0.0.0', auto_network: true,
        libvirt__network_name: 'external-net'
      end

      nodeconfig.vm.provider 'virtualbox' do |v, override|
        if node.has_key? "volumes"
          node['volumes'].each do |volume|
            $volume_file = "#{node['name']}-#{volume['name']}.vdi"
            unless File.exist?($volume_file)
              v.customize ['createmedium', 'disk', '--filename', $volume_file, '--size', volume['size']]
            end
            v.customize ['storageattach', :id, '--storagectl', 'IDE Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', $volume_file]
          end
        end
      end # virtualbox
      nodeconfig.vm.provider :libvirt do |v, override|
        if node.has_key? "volumes"
          node['volumes'].each do |volume|
            v.storage :file, :bus => 'sata', :device => volume['name'], :size => volume['size']
          end
        end
        if node['roles'].include?("compute")
          v.nested = true
        end
      end #libvirt

      $volume_mounts_dict = ''
      $cinder_volume = ''
      if node.has_key? "volumes"
        node['volumes'].each do |volume|
          if volume.has_key? "mount"
            $volume_mounts_dict += "#{volume['name']}=#{volume['mount']},"
          else
            $cinder_volume += "/dev/#{volume['name']},"
          end
        end
      end
      nodeconfig.vm.provision 'shell', privileged: false do |sh|
        sh.env = {
          'SOCKS_PROXY': "#{$socks_proxy}",
          'OPENSTACK_NODE_ROLES': "#{node['roles'].join(" ")}",
          'OPENSTACK_SCRIPTS_DIR': "/vagrant",
          'DOCKER_REGISTRY_IP': "10.10.13.2"
        }
        sh.inline = <<-SHELL
          cd /vagrant/
          ./node.sh -v "#{$volume_mounts_dict[0...-1]}" -c "#{$cinder_volume[0...-1]}" | tee ~/node.log
        SHELL
      end
    end
  end

  config.vm.define :undercloud, primary: true, autostart: false do |undercloud|
    undercloud.vm.hostname = "undercloud"
    undercloud.vm.provision 'shell', privileged: false, inline: <<-SHELL
      cd /vagrant
      sudo mkdir -p /root/.ssh/
      sudo cp insecure_keys/key /root/.ssh/id_rsa
      cp insecure_keys/key ~/.ssh/id_rsa
      cp insecure_keys/key.pub ~/.ssh/id_rsa.pub
      sudo chmod 400 /root/.ssh/id_rsa
      chown "$USER" ~/.ssh/id_rsa
      chmod 400 ~/.ssh/id_rsa

      source /etc/os-release || source /usr/lib/os-release
      case ${ID,,} in
          ubuntu|debian)
              sudo apt-get update
              sudo apt-get install -y -qq -o=Dpkg::Use-Pty=0 curl
          ;;
      esac
    SHELL

    undercloud.vm.provision 'shell', privileged: false do |sh|
      sh.env = {
        'OS_KOLLA_USER': "root",
        'DOCKER_REGISTRY_IP': "10.10.13.2",
        'OS_INVENTORY_FILE': "./samples/distributed/hosts.ini"
      }
      sh.inline = <<-SHELL
        for os_var in $(printenv | grep OS_); do echo "export $os_var" | sudo tee --append /etc/environment ; done
        cd /vagrant/
        sudo mkdir -p /etc/kolla/config
        sudo cp -R etc/kolla/* /etc/kolla/
        sudo chown "$USER" /etc/kolla/passwords.yml

        sudo sed -i "s/^kolla_internal_vip_address: .*/kolla_internal_vip_address: \"10.10.13.3\"/g" /etc/kolla/globals.yml
        sudo sed -i "s/^#network_interface: .*/network_interface: \"eth0\"/g" /etc/kolla/globals.yml
        sudo sed -i "s/^#kolla_external_vip_interface: .*/kolla_external_vip_interface: \"eth1\"/g" /etc/kolla/globals.yml
        sudo sed -i "s/^#neutron_external_interface: .*/neutron_external_interface: \"eth2\"/g" /etc/kolla/globals.yml

        ./undercloud.sh | tee ~/undercloud.log

        source /etc/kolla/admin-openrc.sh
        /opt/kolla-ansible/tools/init-runonce
      SHELL
    end
  end
end
