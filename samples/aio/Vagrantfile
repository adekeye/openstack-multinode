# -*- mode: ruby -*-
# vi: set ft=ruby :
# SPDX-license-identifier: Apache-2.0
##############################################################################
# Copyright (c) 2020
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Apache License, Version 2.0
# which accompanies this distribution, and is available at
# http://www.apache.org/licenses/LICENSE-2.0
##############################################################################

require 'yaml'

vagrant_boxes = YAML.load_file(File.dirname(__FILE__) + '/../../distros_supported.yml')

$no_proxy = ENV['NO_PROXY'] || ENV['no_proxy'] || "127.0.0.1,localhost"
# NOTE: This range is based on vagrant-libvirt network definition CIDR 192.168.121.0/24
(1..254).each do |i|
  $no_proxy += ",192.168.121.#{i}"
end
$no_proxy += ",10.0.2.15,10.10.13.7"
$socks_proxy = ENV['socks_proxy'] || ENV['SOCKS_PROXY'] || ""
$box=vagrant_boxes["centos"][7]

Vagrant.configure("2") do |config|
  config.vm.provider :libvirt
  config.vm.provider :virtualbox

  config.vm.synced_folder '../../', '/vagrant'
  config.vm.box =  $box["name"]
  config.vm.box_version = $box["version"]
  config.ssh.insert_key = false
  config.vm.hostname = "aio"

  # SSH Keys configuration
  config.vm.provision 'shell', privileged: false, inline: <<-SHELL
    sudo sed -i '/^PermitRootLogin no/d' /etc/ssh/sshd_config
    cd /vagrant

    # Root user configuration
    sudo mkdir -p /root/.ssh
    cat insecure_keys/key.pub | sudo tee /root/.ssh/authorized_keys
    sudo cp insecure_keys/key /root/.ssh/id_rsa
    sudo chmod 700 /root/.ssh
    sudo chmod 600 /root/.ssh/authorized_keys
    sudo chmod 400 /root/.ssh/id_rsa

    # Vagrant user configuration
    cp insecure_keys/key ~/.ssh/id_rsa
    cp insecure_keys/key.pub ~/.ssh/id_rsa.pub
    chown "$USER" ~/.ssh/id_rsa
    chmod 400 ~/.ssh/id_rsa
  SHELL
  # Configure single NIC limitation
  config.vm.provision 'shell', privileged: false, inline: <<-SHELL
    sudo ip link add veth0 type veth peer name veth1
    sudo ip addr add 10.10.13.7/24 dev veth0
    sudo ip link set veth0 up

    source /etc/os-release || source /usr/lib/os-release
    case ${ID,,} in
        rhel|centos|fedora)
            PKG_MANAGER=$(command -v dnf || command -v yum)
            if ! command -v brctl; then
                sudo -H -E "$PKG_MANAGER" -q -y install bridge-utils
            fi
        ;;
    esac
    sudo brctl addbr uplinkbridge
    sudo brctl addif uplinkbridge veth0
    sudo ip link set dev uplinkbridge up
  SHELL
  # Ensure Permissive SELinux policy
  config.vm.provision 'shell', privileged: false, inline: <<-SHELL
    if command -v sestatus; then
        sudo setenforce Permissive
        sudo sed -i "s/^SELINUX=.*/SELINUX=permissive/g" /etc/selinux/config
    fi
  SHELL
  config.vm.provision 'shell', privileged: false do |sh|
    sh.env = {
      'SOCKS_PROXY': "#{$socks_proxy}",
      'OS_KOLLA_ENABLE_SKYDIVE': "yes",
      'OS_FOLDER': "/vagrant/"
    }
    sh.inline = <<-SHELL
      source /etc/os-release || source /usr/lib/os-release
      case ${ID,,} in
          ubuntu|debian)
              sudo apt-get update
              sudo apt-get install -y -qq -o=Dpkg::Use-Pty=0 curl 
          ;;
      esac

      cd /vagrant
      ./node.sh -v sda=/var/lib/docker/ -c /dev/sdb | tee ~/node_aio.log
      ./install.sh | tee ~/install_aio.log

      sudo curl -L git.io/scope -o /usr/local/bin/scope
      sudo chmod a+x /usr/local/bin/scope
      newgrp docker <<EONG
      scope launch
EONG
    SHELL
  end

  # Intel's NUC BXNUC10I7FNHAA1
  [:virtualbox, :libvirt].each do |provider|
  config.vm.provider provider do |p|
      p.cpus = 12 # sockets * cores * threads
      p.memory = 16384 # 2 x 8GB DDR4-2666
    end
  end

  $volume_file = "aio-sda.vdi"
  $cinder_file = "aio-sdb.vdi"
  config.vm.provider 'virtualbox' do |v, override|
    v.gui = false
    unless File.exist?($volume_file)
      v.customize ['createmedium', 'disk', '--filename', $volume_file, '--size', 50]
    end
    unless File.exist?($cinder_file)
      v.customize ['createmedium', 'disk', '--filename', $cinder_file, '--size', 100]
    end
    v.customize ['storageattach', :id, '--storagectl', $box["vb_controller"], '--port', 1, '--device', 0, '--type', 'hdd', '--medium', $volume_file]
    v.customize ['storageattach', :id, '--storagectl', $box["vb_controller"], '--port', 1, '--device', 1, '--type', 'hdd', '--medium', $cinder_file]
  end

  config.vm.provider :libvirt do |v, override|
    v.cputopology :sockets => 1, :cores => 6, :threads => 2 # Intel Core i7-10710U Processor
    v.cpu_mode = 'host-passthrough'
    v.random_hostname = true
    v.nested = true
    v.management_network_address = "192.168.121.0/24"
    v.storage :file, :bus => 'sata', :device => 'sda', :size => 50 # ~30 GB Kolla Docker images
    v.storage :file, :bus => 'sata', :device => 'sdb', :size => 100 # Cinder volume
  end

  if ENV['http_proxy'] != nil and ENV['https_proxy'] != nil
    if Vagrant.has_plugin?('vagrant-proxyconf')
      config.proxy.http     = ENV['http_proxy'] || ENV['HTTP_PROXY'] || ""
      config.proxy.https    = ENV['https_proxy'] || ENV['HTTPS_PROXY'] || ""
      config.proxy.no_proxy = $no_proxy
      config.proxy.enabled = { docker: false }
    end
  end
end
