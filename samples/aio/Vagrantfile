# -*- mode: ruby -*-
# vi: set ft=ruby :
# SPDX-license-identifier: Apache-2.0
##############################################################################
# Copyright (c) 2020
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Apache License, Version 2.0
# which accompanies this distribution, and is available at
# http://www.apache.org/licenses/LICENSE-2.0
##############################################################################

require 'yaml'

vagrant_boxes = YAML.load_file(File.dirname(__FILE__) + '/../../distros_supported.yml')

$no_proxy = ENV['NO_PROXY'] || ENV['no_proxy'] || "127.0.0.1,localhost"
# NOTE: This range is based on vagrant-libvirt network definition CIDR 192.168.121.0/24
(1..254).each do |i|
  $no_proxy += ",192.168.121.#{i}"
end
$no_proxy += ",10.10.13.7"
$socks_proxy = ENV['socks_proxy'] || ENV['SOCKS_PROXY'] || ""

Vagrant.configure("2") do |config|
  config.vm.provider :libvirt
  config.vm.provider :virtualbox

  config.vm.synced_folder '../../', '/vagrant'
  config.vm.box =  vagrant_boxes["ubuntu"]["xenial"]["name"]
  config.vm.box_version = vagrant_boxes["ubuntu"]["xenial"]["version"]
  config.ssh.insert_key = false
  config.vm.hostname = "aio"
  config.vm.provision 'shell'do |sh|
    sh.inline = <<-SHELL
      cd /vagrant
      mkdir -p /root/.ssh
      cat insecure_keys/key.pub | tee /root/.ssh/authorized_keys
      chmod og-wx /root/.ssh/authorized_keys
      cp insecure_keys/key /root/.ssh/id_rsa
      sudo chmod 400 /root/.ssh/id_rsa
    SHELL
  end
  config.vm.provision 'shell', privileged: false do |sh|
    sh.env = {
      'SOCKS_PROXY': "#{$socks_proxy}",
      'OS_FOLDER': "/vagrant/"
    }
    sh.inline = <<-SHELL
      cd /vagrant
      ./node.sh -v sda=/var/lib/docker/ | tee ~/node_aio.log
      ./install.sh | tee ~/install_aio.log
    SHELL
  end

  [:virtualbox, :libvirt].each do |provider|
  config.vm.provider provider do |p, override|
      p.cpus = 16
      p.memory = 32768
    end
  end

  $volume_file = "aio-sda.vdi"
  config.vm.provider 'virtualbox' do |v, override|
    unless File.exist?($volume_file)
      v.customize ['createmedium', 'disk', '--filename', $volume_file, '--size', 50]
    end
    v.customize ['storageattach', :id, '--storagectl', 'IDE Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', $volume_file]
  end

  config.vm.provider :libvirt do |v, override|
    v.cpu_mode = 'host-passthrough'
    v.random_hostname = true
    v.nested = true
    v.management_network_address = "192.168.121.0/24"
    v.storage :file, :bus => 'sata', :device => 'sda', :size => 50
  end

  config.vm.network :private_network, :ip => "10.10.13.7", :type => :static,
    libvirt__network_name: "tunnel-net"

  if ENV['http_proxy'] != nil and ENV['https_proxy'] != nil
    if Vagrant.has_plugin?('vagrant-proxyconf')
      config.proxy.http     = ENV['http_proxy'] || ENV['HTTP_PROXY'] || ""
      config.proxy.https    = ENV['https_proxy'] || ENV['HTTPS_PROXY'] || ""
      config.proxy.no_proxy = $no_proxy
      config.proxy.enabled = { docker: false }
    end
  end
end
