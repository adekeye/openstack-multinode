# -*- mode: ruby -*-
# vi: set ft=ruby :

compute_nodes = [
  { :hostname => "compute01", :cpu => 16, :memory => 16384, :ip => "10.10.13.9" },
  { :hostname => "compute02", :cpu => 16, :memory => 16384, :ip => "10.10.13.10" }
]

$no_proxy = ENV['NO_PROXY'] || ENV['no_proxy'] || "127.0.0.1,localhost"
# NOTE: This range is based on vagrant-libvirt network definition CIDR 192.168.121.0/24
(1..254).each do |i|
  $no_proxy += ",192.168.121.#{i}"
end
compute_nodes.each do |i|
  $no_proxy += ",#{i[:ip]}"
end
$no_proxy += ",10.10.13.8"
$socks_proxy = ENV['socks_proxy'] || ENV['SOCKS_PROXY'] || ""

Vagrant.configure("2") do |config|
  config.vm.provider :libvirt
  config.vm.provider :virtualbox

  config.vm.synced_folder '../../', '/vagrant'
  config.vm.box = "elastic/ubuntu-16.04-x86_64"
  config.ssh.insert_key = false
  if ENV['http_proxy'] != nil and ENV['https_proxy'] != nil
    if Vagrant.has_plugin?('vagrant-proxyconf')
      config.proxy.http     = ENV['http_proxy'] || ENV['HTTP_PROXY'] || ""
      config.proxy.https    = ENV['https_proxy'] || ENV['HTTPS_PROXY'] || ""
      config.proxy.no_proxy = $no_proxy
      config.proxy.enabled = { docker: false }
    end
  end

  config.vm.provider :libvirt do |v, override|
    v.cpu_mode = 'host-passthrough'
    v.random_hostname = true
    v.management_network_address = "192.168.121.0/24"
  end
  config.vm.provision 'shell' do |sh|
    sh.inline = <<-SHELL
      mkdir -p /root/.ssh
      cat /vagrant/insecure_keys/key.pub | tee /root/.ssh/authorized_keys
      chmod og-wx /root/.ssh/authorized_keys
    SHELL
  end 
  config.vm.provision 'shell', privileged: false do |sh|
    sh.inline = <<-SHELL
      cd /vagrant
      ./node.sh | tee node_$(hostname).log
    SHELL
  end 
  config.vm.provision :reload

  compute_nodes.each do |compute_node|
    config.vm.define "#{compute_node[:hostname]}" do |nodeconfig|
      nodeconfig.vm.hostname = compute_node[:hostname]
      nodeconfig.vm.provider :libvirt do |v, override|
        v.nested = true
      end
      nodeconfig.vm.network :private_network, :ip => compute_node[:ip], :type => :static,
        libvirt__network_name: "tunnel-net"
      [:virtualbox, :libvirt].each do |provider|
        config.vm.provider provider do |p, override|
          p.cpus = compute_node[:cpu]
          p.memory = compute_node[:memory]
        end
      end
    end
  end

  config.vm.define "controller01", primary: true, autostart: false do |controller01|
    controller01.vm.hostname = "controller01"
    controller01.vm.provision 'shell', privileged: false do |sh|
      sh.inline = <<-SHELL
        cd /vagrant
        sudo mkdir -p /root/.ssh/
        sudo cp insecure_keys/key /root/.ssh/id_rsa
        sudo chmod 400 /root/.ssh/id_rsa
      SHELL
    end
    controller01.vm.provision 'shell', privileged: false do |sh|
      sh.env = {
        'SOCKS_PROXY': "#{$socks_proxy}",
      }
      sh.inline = <<-SHELL
        OS_FLAVOR=noha OS_FOLDER=/vagrant/ bash /vagrant/samples/install.sh | tee install_noha.log
      SHELL
    end
    controller01.vm.network :private_network, :ip => "10.10.13.8", :type => :static,
      libvirt__network_name: "tunnel-net"
    [:virtualbox, :libvirt].each do |provider|
      config.vm.provider provider do |p, override|
        p.cpus = 4
        p.memory = 8192
      end
    end
  end
end
